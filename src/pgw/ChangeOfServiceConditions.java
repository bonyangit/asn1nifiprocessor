/*
 * This class file was automatically generated by ASN1bean v1.12.0 (http://www.beanit.com)
 */

package pgw;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.asn1bean.ber.*;
import com.beanit.asn1bean.ber.types.*;
import com.beanit.asn1bean.ber.types.string.*;


public class ChangeOfServiceConditions implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class AFRecordInformation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		private byte[] code = null;
		private List<pgw.AFRecordInformation> seqOf = null;

		public AFRecordInformation() {
			seqOf = new ArrayList<pgw.AFRecordInformation>();
		}

		public AFRecordInformation(byte[] code) {
			this.code = code;
		}

		public List<pgw.AFRecordInformation> getAFRecordInformation() {
			if (seqOf == null) {
				seqOf = new ArrayList<pgw.AFRecordInformation>();
			}
			return seqOf;
		}

		@Override public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				reverseOS.write(code);
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		@Override public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int tlByteCount = 0;
			int vByteCount = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				tlByteCount += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			tlByteCount += length.decode(is);
			int lengthVal = length.val;

			while (vByteCount < lengthVal || lengthVal < 0) {
				vByteCount += berTag.decode(is);

				if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
					vByteCount += BerLength.readEocByte(is);
					break;
				}

				if (!berTag.equals(pgw.AFRecordInformation.tag)) {
					throw new IOException("Tag does not match mandatory sequence of/set of component.");
				}
				pgw.AFRecordInformation element = new pgw.AFRecordInformation();
				vByteCount += element.decode(is, false);
				seqOf.add(element);
			}
			if (lengthVal >= 0 && vByteCount != lengthVal) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + lengthVal + " but has " + vByteCount);

			}
			return tlByteCount + vByteCount;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<pgw.AFRecordInformation> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ServiceSpecificInfo implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		private byte[] code = null;
		private List<pgw.ServiceSpecificInfo> seqOf = null;

		public ServiceSpecificInfo() {
			seqOf = new ArrayList<pgw.ServiceSpecificInfo>();
		}

		public ServiceSpecificInfo(byte[] code) {
			this.code = code;
		}

		public List<pgw.ServiceSpecificInfo> getServiceSpecificInfo() {
			if (seqOf == null) {
				seqOf = new ArrayList<pgw.ServiceSpecificInfo>();
			}
			return seqOf;
		}

		@Override public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				reverseOS.write(code);
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		@Override public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int tlByteCount = 0;
			int vByteCount = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				tlByteCount += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			tlByteCount += length.decode(is);
			int lengthVal = length.val;

			while (vByteCount < lengthVal || lengthVal < 0) {
				vByteCount += berTag.decode(is);

				if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
					vByteCount += BerLength.readEocByte(is);
					break;
				}

				if (!berTag.equals(pgw.ServiceSpecificInfo.tag)) {
					throw new IOException("Tag does not match mandatory sequence of/set of component.");
				}
				pgw.ServiceSpecificInfo element = new pgw.ServiceSpecificInfo();
				vByteCount += element.decode(is, false);
				seqOf.add(element);
			}
			if (lengthVal >= 0 && vByteCount != lengthVal) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + lengthVal + " but has " + vByteCount);

			}
			return tlByteCount + vByteCount;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<pgw.ServiceSpecificInfo> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	private byte[] code = null;
	private BerInteger ratingGroup = null;
	private BerIA5String chargingRuleBaseName = null;
	private BerInteger resultCode = null;
	private BerInteger localSequenceNumber = null;
	private BerOctetString timeOfFirstUsage = null;
	private BerOctetString timeOfLastUsage = null;
	private BerInteger timeUsage = null;
	private BerBitString serviceConditionChange = null;
	private EPCQoSInformation qoSInformationNeg = null;
	private GSNAddress sgsnAddress = null;
	private BerOctetString sGSNPLMNIdentifier = null;
	private BerInteger datavolumeFBCUplink = null;
	private BerInteger datavolumeFBCDownlink = null;
	private BerOctetString timeOfReport = null;
	private BerInteger rATType = null;
	private BerBoolean failureHandlingContinue = null;
	private BerInteger serviceIdentifier = null;
	private PSFurnishChargingInformation pSFurnishChargingInformation = null;
	private AFRecordInformation aFRecordInformation = null;
	private BerOctetString userLocationInformation = null;
	private EventBasedChargingInformation eventBasedChargingInformation = null;
	private TimeQuotaMechanism timeQuotaMechanism = null;
	private ServiceSpecificInfo serviceSpecificInfo = null;
	private BerOctetString threeGPP2UserLocationInformation = null;
	private ServingPLMNRateControl servingPLMNRateControl = null;
	private APNRateControl aPNRateControl = null;
	
	public ChangeOfServiceConditions() {
	}

	public ChangeOfServiceConditions(byte[] code) {
		this.code = code;
	}

	public void setRatingGroup(BerInteger ratingGroup) {
		this.ratingGroup = ratingGroup;
	}

	public BerInteger getRatingGroup() {
		return ratingGroup;
	}

	public void setChargingRuleBaseName(BerIA5String chargingRuleBaseName) {
		this.chargingRuleBaseName = chargingRuleBaseName;
	}

	public BerIA5String getChargingRuleBaseName() {
		return chargingRuleBaseName;
	}

	public void setResultCode(BerInteger resultCode) {
		this.resultCode = resultCode;
	}

	public BerInteger getResultCode() {
		return resultCode;
	}

	public void setLocalSequenceNumber(BerInteger localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public BerInteger getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setTimeOfFirstUsage(BerOctetString timeOfFirstUsage) {
		this.timeOfFirstUsage = timeOfFirstUsage;
	}

	public BerOctetString getTimeOfFirstUsage() {
		return timeOfFirstUsage;
	}

	public void setTimeOfLastUsage(BerOctetString timeOfLastUsage) {
		this.timeOfLastUsage = timeOfLastUsage;
	}

	public BerOctetString getTimeOfLastUsage() {
		return timeOfLastUsage;
	}

	public void setTimeUsage(BerInteger timeUsage) {
		this.timeUsage = timeUsage;
	}

	public BerInteger getTimeUsage() {
		return timeUsage;
	}

	public void setServiceConditionChange(BerBitString serviceConditionChange) {
		this.serviceConditionChange = serviceConditionChange;
	}

	public BerBitString getServiceConditionChange() {
		return serviceConditionChange;
	}

	public void setQoSInformationNeg(EPCQoSInformation qoSInformationNeg) {
		this.qoSInformationNeg = qoSInformationNeg;
	}

	public EPCQoSInformation getQoSInformationNeg() {
		return qoSInformationNeg;
	}

	public void setSgsnAddress(GSNAddress sgsnAddress) {
		this.sgsnAddress = sgsnAddress;
	}

	public GSNAddress getSgsnAddress() {
		return sgsnAddress;
	}

	public void setSGSNPLMNIdentifier(BerOctetString sGSNPLMNIdentifier) {
		this.sGSNPLMNIdentifier = sGSNPLMNIdentifier;
	}

	public BerOctetString getSGSNPLMNIdentifier() {
		return sGSNPLMNIdentifier;
	}

	public void setDatavolumeFBCUplink(BerInteger datavolumeFBCUplink) {
		this.datavolumeFBCUplink = datavolumeFBCUplink;
	}

	public BerInteger getDatavolumeFBCUplink() {
		return datavolumeFBCUplink;
	}

	public void setDatavolumeFBCDownlink(BerInteger datavolumeFBCDownlink) {
		this.datavolumeFBCDownlink = datavolumeFBCDownlink;
	}

	public BerInteger getDatavolumeFBCDownlink() {
		return datavolumeFBCDownlink;
	}

	public void setTimeOfReport(BerOctetString timeOfReport) {
		this.timeOfReport = timeOfReport;
	}

	public BerOctetString getTimeOfReport() {
		return timeOfReport;
	}

	public void setRATType(BerInteger rATType) {
		this.rATType = rATType;
	}

	public BerInteger getRATType() {
		return rATType;
	}

	public void setFailureHandlingContinue(BerBoolean failureHandlingContinue) {
		this.failureHandlingContinue = failureHandlingContinue;
	}

	public BerBoolean getFailureHandlingContinue() {
		return failureHandlingContinue;
	}

	public void setServiceIdentifier(BerInteger serviceIdentifier) {
		this.serviceIdentifier = serviceIdentifier;
	}

	public BerInteger getServiceIdentifier() {
		return serviceIdentifier;
	}

	public void setPSFurnishChargingInformation(PSFurnishChargingInformation pSFurnishChargingInformation) {
		this.pSFurnishChargingInformation = pSFurnishChargingInformation;
	}

	public PSFurnishChargingInformation getPSFurnishChargingInformation() {
		return pSFurnishChargingInformation;
	}

	public void setAFRecordInformation(AFRecordInformation aFRecordInformation) {
		this.aFRecordInformation = aFRecordInformation;
	}

	public AFRecordInformation getAFRecordInformation() {
		return aFRecordInformation;
	}

	public void setUserLocationInformation(BerOctetString userLocationInformation) {
		this.userLocationInformation = userLocationInformation;
	}

	public BerOctetString getUserLocationInformation() {
		return userLocationInformation;
	}

	public void setEventBasedChargingInformation(EventBasedChargingInformation eventBasedChargingInformation) {
		this.eventBasedChargingInformation = eventBasedChargingInformation;
	}

	public EventBasedChargingInformation getEventBasedChargingInformation() {
		return eventBasedChargingInformation;
	}

	public void setTimeQuotaMechanism(TimeQuotaMechanism timeQuotaMechanism) {
		this.timeQuotaMechanism = timeQuotaMechanism;
	}

	public TimeQuotaMechanism getTimeQuotaMechanism() {
		return timeQuotaMechanism;
	}

	public void setServiceSpecificInfo(ServiceSpecificInfo serviceSpecificInfo) {
		this.serviceSpecificInfo = serviceSpecificInfo;
	}

	public ServiceSpecificInfo getServiceSpecificInfo() {
		return serviceSpecificInfo;
	}

	public void setThreeGPP2UserLocationInformation(BerOctetString threeGPP2UserLocationInformation) {
		this.threeGPP2UserLocationInformation = threeGPP2UserLocationInformation;
	}

	public BerOctetString getThreeGPP2UserLocationInformation() {
		return threeGPP2UserLocationInformation;
	}

	public void setServingPLMNRateControl(ServingPLMNRateControl servingPLMNRateControl) {
		this.servingPLMNRateControl = servingPLMNRateControl;
	}

	public ServingPLMNRateControl getServingPLMNRateControl() {
		return servingPLMNRateControl;
	}

	public void setAPNRateControl(APNRateControl aPNRateControl) {
		this.aPNRateControl = aPNRateControl;
	}

	public APNRateControl getAPNRateControl() {
		return aPNRateControl;
	}

	@Override public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			reverseOS.write(code);
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (aPNRateControl != null) {
			codeLength += aPNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (servingPLMNRateControl != null) {
			codeLength += servingPLMNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (threeGPP2UserLocationInformation != null) {
			codeLength += threeGPP2UserLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			reverseOS.write(0x98);
			codeLength += 1;
		}
		
		if (serviceSpecificInfo != null) {
			codeLength += serviceSpecificInfo.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (timeQuotaMechanism != null) {
			codeLength += timeQuotaMechanism.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (eventBasedChargingInformation != null) {
			codeLength += eventBasedChargingInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
		}
		
		if (userLocationInformation != null) {
			codeLength += userLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			reverseOS.write(0x94);
			codeLength += 1;
		}
		
		if (aFRecordInformation != null) {
			codeLength += aFRecordInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (pSFurnishChargingInformation != null) {
			codeLength += pSFurnishChargingInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (serviceIdentifier != null) {
			codeLength += serviceIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (failureHandlingContinue != null) {
			codeLength += failureHandlingContinue.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
		}
		
		if (rATType != null) {
			codeLength += rATType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		codeLength += timeOfReport.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 14
		reverseOS.write(0x8E);
		codeLength += 1;
		
		if (datavolumeFBCDownlink != null) {
			codeLength += datavolumeFBCDownlink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (datavolumeFBCUplink != null) {
			codeLength += datavolumeFBCUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (sGSNPLMNIdentifier != null) {
			codeLength += sGSNPLMNIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (sgsnAddress != null) {
			sublength = sgsnAddress.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (qoSInformationNeg != null) {
			codeLength += qoSInformationNeg.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		codeLength += serviceConditionChange.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		if (timeUsage != null) {
			codeLength += timeUsage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (timeOfLastUsage != null) {
			codeLength += timeOfLastUsage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (timeOfFirstUsage != null) {
			codeLength += timeOfFirstUsage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (localSequenceNumber != null) {
			codeLength += localSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (resultCode != null) {
			codeLength += resultCode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (chargingRuleBaseName != null) {
			codeLength += chargingRuleBaseName.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (ratingGroup != null) {
			codeLength += ratingGroup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	@Override public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int tlByteCount = 0;
		int vByteCount = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			tlByteCount += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		tlByteCount += length.decode(is);
		int lengthVal = length.val;
		vByteCount += berTag.decode(is);

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			ratingGroup = new BerInteger();
			vByteCount += ratingGroup.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			chargingRuleBaseName = new BerIA5String();
			vByteCount += chargingRuleBaseName.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			resultCode = new BerInteger();
			vByteCount += resultCode.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			localSequenceNumber = new BerInteger();
			vByteCount += localSequenceNumber.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			timeOfFirstUsage = new BerOctetString();
			vByteCount += timeOfFirstUsage.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			timeOfLastUsage = new BerOctetString();
			vByteCount += timeOfLastUsage.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			timeUsage = new BerInteger();
			vByteCount += timeUsage.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			serviceConditionChange = new BerBitString();
			vByteCount += serviceConditionChange.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			qoSInformationNeg = new EPCQoSInformation();
			vByteCount += qoSInformationNeg.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			vByteCount += length.decode(is);
			sgsnAddress = new GSNAddress();
			vByteCount += sgsnAddress.decode(is, null);
			vByteCount += length.readEocIfIndefinite(is);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			sGSNPLMNIdentifier = new BerOctetString();
			vByteCount += sGSNPLMNIdentifier.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			datavolumeFBCUplink = new BerInteger();
			vByteCount += datavolumeFBCUplink.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			datavolumeFBCDownlink = new BerInteger();
			vByteCount += datavolumeFBCDownlink.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			timeOfReport = new BerOctetString();
			vByteCount += timeOfReport.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			rATType = new BerInteger();
			vByteCount += rATType.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			failureHandlingContinue = new BerBoolean();
			vByteCount += failureHandlingContinue.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			serviceIdentifier = new BerInteger();
			vByteCount += serviceIdentifier.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			pSFurnishChargingInformation = new PSFurnishChargingInformation();
			vByteCount += pSFurnishChargingInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			aFRecordInformation = new AFRecordInformation();
			vByteCount += aFRecordInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			userLocationInformation = new BerOctetString();
			vByteCount += userLocationInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			eventBasedChargingInformation = new EventBasedChargingInformation();
			vByteCount += eventBasedChargingInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			timeQuotaMechanism = new TimeQuotaMechanism();
			vByteCount += timeQuotaMechanism.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			serviceSpecificInfo = new ServiceSpecificInfo();
			vByteCount += serviceSpecificInfo.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			threeGPP2UserLocationInformation = new BerOctetString();
			vByteCount += threeGPP2UserLocationInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			servingPLMNRateControl = new ServingPLMNRateControl();
			vByteCount += servingPLMNRateControl.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			aPNRateControl = new APNRateControl();
			vByteCount += aPNRateControl.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (lengthVal < 0) {
			if (!berTag.equals(0, 0, 0)) {
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			vByteCount += BerLength.readEocByte(is);
			return tlByteCount + vByteCount;
		}

		throw new IOException("Unexpected end of sequence, length tag: " + lengthVal + ", bytes decoded: " + vByteCount);

	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	@Override public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (ratingGroup != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ratingGroup: ").append(ratingGroup);
			firstSelectedElement = false;
		}
		
		if (chargingRuleBaseName != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingRuleBaseName: ").append(chargingRuleBaseName);
			firstSelectedElement = false;
		}
		
		if (resultCode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("resultCode: ").append(resultCode);
			firstSelectedElement = false;
		}
		
		if (localSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (timeOfFirstUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeOfFirstUsage: ").append(timeOfFirstUsage);
			firstSelectedElement = false;
		}
		
		if (timeOfLastUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeOfLastUsage: ").append(timeOfLastUsage);
			firstSelectedElement = false;
		}
		
		if (timeUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeUsage: ").append(timeUsage);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceConditionChange != null) {
			sb.append("serviceConditionChange: ").append(serviceConditionChange);
		}
		else {
			sb.append("serviceConditionChange: <empty-required-field>");
		}
		
		if (qoSInformationNeg != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qoSInformationNeg: ");
			qoSInformationNeg.appendAsString(sb, indentLevel + 1);
		}
		
		if (sgsnAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sgsnAddress: ");
			sgsnAddress.appendAsString(sb, indentLevel + 1);
		}
		
		if (sGSNPLMNIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sGSNPLMNIdentifier: ").append(sGSNPLMNIdentifier);
		}
		
		if (datavolumeFBCUplink != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("datavolumeFBCUplink: ").append(datavolumeFBCUplink);
		}
		
		if (datavolumeFBCDownlink != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("datavolumeFBCDownlink: ").append(datavolumeFBCDownlink);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeOfReport != null) {
			sb.append("timeOfReport: ").append(timeOfReport);
		}
		else {
			sb.append("timeOfReport: <empty-required-field>");
		}
		
		if (rATType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rATType: ").append(rATType);
		}
		
		if (failureHandlingContinue != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("failureHandlingContinue: ").append(failureHandlingContinue);
		}
		
		if (serviceIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceIdentifier: ").append(serviceIdentifier);
		}
		
		if (pSFurnishChargingInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pSFurnishChargingInformation: ");
			pSFurnishChargingInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (aFRecordInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aFRecordInformation: ");
			aFRecordInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (userLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userLocationInformation: ").append(userLocationInformation);
		}
		
		if (eventBasedChargingInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("eventBasedChargingInformation: ");
			eventBasedChargingInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (timeQuotaMechanism != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeQuotaMechanism: ");
			timeQuotaMechanism.appendAsString(sb, indentLevel + 1);
		}
		
		if (serviceSpecificInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceSpecificInfo: ");
			serviceSpecificInfo.appendAsString(sb, indentLevel + 1);
		}
		
		if (threeGPP2UserLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("threeGPP2UserLocationInformation: ").append(threeGPP2UserLocationInformation);
		}
		
		if (servingPLMNRateControl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingPLMNRateControl: ");
			servingPLMNRateControl.appendAsString(sb, indentLevel + 1);
		}
		
		if (aPNRateControl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aPNRateControl: ");
			aPNRateControl.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

