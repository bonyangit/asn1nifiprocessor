/*
 * This class file was automatically generated by ASN1bean v1.12.0 (http://www.beanit.com)
 */

package pgw;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.asn1bean.ber.*;
import com.beanit.asn1bean.ber.types.*;
import com.beanit.asn1bean.ber.types.string.*;


public class ChangeOfCharCondition implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	private byte[] code = null;
	private BerOctetString qosRequested = null;
	private BerOctetString qosNegotiated = null;
	private BerInteger dataVolumeGPRSUplink = null;
	private BerInteger dataVolumeGPRSDownlink = null;
	private BerEnum changeCondition = null;
	private BerOctetString changeTime = null;
	private BerBoolean failureHandlingContinue = null;
	private BerOctetString userLocationInformation = null;
	private EPCQoSInformation ePCQoSInformation = null;
	private BerBoolean cPCIoTEPSOptimisationIndicator = null;
	private ServingPLMNRateControl servingPLMNRateControl = null;
	
	public ChangeOfCharCondition() {
	}

	public ChangeOfCharCondition(byte[] code) {
		this.code = code;
	}

	public void setQosRequested(BerOctetString qosRequested) {
		this.qosRequested = qosRequested;
	}

	public BerOctetString getQosRequested() {
		return qosRequested;
	}

	public void setQosNegotiated(BerOctetString qosNegotiated) {
		this.qosNegotiated = qosNegotiated;
	}

	public BerOctetString getQosNegotiated() {
		return qosNegotiated;
	}

	public void setDataVolumeGPRSUplink(BerInteger dataVolumeGPRSUplink) {
		this.dataVolumeGPRSUplink = dataVolumeGPRSUplink;
	}

	public BerInteger getDataVolumeGPRSUplink() {
		return dataVolumeGPRSUplink;
	}

	public void setDataVolumeGPRSDownlink(BerInteger dataVolumeGPRSDownlink) {
		this.dataVolumeGPRSDownlink = dataVolumeGPRSDownlink;
	}

	public BerInteger getDataVolumeGPRSDownlink() {
		return dataVolumeGPRSDownlink;
	}

	public void setChangeCondition(BerEnum changeCondition) {
		this.changeCondition = changeCondition;
	}

	public BerEnum getChangeCondition() {
		return changeCondition;
	}

	public void setChangeTime(BerOctetString changeTime) {
		this.changeTime = changeTime;
	}

	public BerOctetString getChangeTime() {
		return changeTime;
	}

	public void setFailureHandlingContinue(BerBoolean failureHandlingContinue) {
		this.failureHandlingContinue = failureHandlingContinue;
	}

	public BerBoolean getFailureHandlingContinue() {
		return failureHandlingContinue;
	}

	public void setUserLocationInformation(BerOctetString userLocationInformation) {
		this.userLocationInformation = userLocationInformation;
	}

	public BerOctetString getUserLocationInformation() {
		return userLocationInformation;
	}

	public void setEPCQoSInformation(EPCQoSInformation ePCQoSInformation) {
		this.ePCQoSInformation = ePCQoSInformation;
	}

	public EPCQoSInformation getEPCQoSInformation() {
		return ePCQoSInformation;
	}

	public void setCPCIoTEPSOptimisationIndicator(BerBoolean cPCIoTEPSOptimisationIndicator) {
		this.cPCIoTEPSOptimisationIndicator = cPCIoTEPSOptimisationIndicator;
	}

	public BerBoolean getCPCIoTEPSOptimisationIndicator() {
		return cPCIoTEPSOptimisationIndicator;
	}

	public void setServingPLMNRateControl(ServingPLMNRateControl servingPLMNRateControl) {
		this.servingPLMNRateControl = servingPLMNRateControl;
	}

	public ServingPLMNRateControl getServingPLMNRateControl() {
		return servingPLMNRateControl;
	}

	@Override public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			reverseOS.write(code);
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (servingPLMNRateControl != null) {
			codeLength += servingPLMNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (cPCIoTEPSOptimisationIndicator != null) {
			codeLength += cPCIoTEPSOptimisationIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			reverseOS.write(0x93);
			codeLength += 1;
		}
		
		if (ePCQoSInformation != null) {
			codeLength += ePCQoSInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (userLocationInformation != null) {
			codeLength += userLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (failureHandlingContinue != null) {
			codeLength += failureHandlingContinue.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		codeLength += changeTime.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += changeCondition.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		if (dataVolumeGPRSDownlink != null) {
			codeLength += dataVolumeGPRSDownlink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (dataVolumeGPRSUplink != null) {
			codeLength += dataVolumeGPRSUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (qosNegotiated != null) {
			codeLength += qosNegotiated.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (qosRequested != null) {
			codeLength += qosRequested.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	@Override public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int tlByteCount = 0;
		int vByteCount = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			tlByteCount += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		tlByteCount += length.decode(is);
		int lengthVal = length.val;
		vByteCount += berTag.decode(is);

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			qosRequested = new BerOctetString();
			vByteCount += qosRequested.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			qosNegotiated = new BerOctetString();
			vByteCount += qosNegotiated.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			dataVolumeGPRSUplink = new BerInteger();
			vByteCount += dataVolumeGPRSUplink.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			dataVolumeGPRSDownlink = new BerInteger();
			vByteCount += dataVolumeGPRSDownlink.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			changeCondition = new BerEnum();
			vByteCount += changeCondition.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			changeTime = new BerOctetString();
			vByteCount += changeTime.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			failureHandlingContinue = new BerBoolean();
			vByteCount += failureHandlingContinue.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			userLocationInformation = new BerOctetString();
			vByteCount += userLocationInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			ePCQoSInformation = new EPCQoSInformation();
			vByteCount += ePCQoSInformation.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			cPCIoTEPSOptimisationIndicator = new BerBoolean();
			vByteCount += cPCIoTEPSOptimisationIndicator.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			servingPLMNRateControl = new ServingPLMNRateControl();
			vByteCount += servingPLMNRateControl.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (lengthVal < 0) {
			if (!berTag.equals(0, 0, 0)) {
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			vByteCount += BerLength.readEocByte(is);
			return tlByteCount + vByteCount;
		}

		throw new IOException("Unexpected end of sequence, length tag: " + lengthVal + ", bytes decoded: " + vByteCount);

	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	@Override public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (qosRequested != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qosRequested: ").append(qosRequested);
			firstSelectedElement = false;
		}
		
		if (qosNegotiated != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qosNegotiated: ").append(qosNegotiated);
			firstSelectedElement = false;
		}
		
		if (dataVolumeGPRSUplink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeGPRSUplink: ").append(dataVolumeGPRSUplink);
			firstSelectedElement = false;
		}
		
		if (dataVolumeGPRSDownlink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeGPRSDownlink: ").append(dataVolumeGPRSDownlink);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (changeCondition != null) {
			sb.append("changeCondition: ").append(changeCondition);
		}
		else {
			sb.append("changeCondition: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (changeTime != null) {
			sb.append("changeTime: ").append(changeTime);
		}
		else {
			sb.append("changeTime: <empty-required-field>");
		}
		
		if (failureHandlingContinue != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("failureHandlingContinue: ").append(failureHandlingContinue);
		}
		
		if (userLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userLocationInformation: ").append(userLocationInformation);
		}
		
		if (ePCQoSInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ePCQoSInformation: ");
			ePCQoSInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (cPCIoTEPSOptimisationIndicator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cPCIoTEPSOptimisationIndicator: ").append(cPCIoTEPSOptimisationIndicator);
		}
		
		if (servingPLMNRateControl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingPLMNRateControl: ");
			servingPLMNRateControl.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

