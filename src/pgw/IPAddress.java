/*
 * This class file was automatically generated by ASN1bean v1.12.0 (http://www.beanit.com)
 */

package pgw;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.asn1bean.ber.*;
import com.beanit.asn1bean.ber.types.*;
import com.beanit.asn1bean.ber.types.string.*;


public class IPAddress implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	private byte[] code = null;
	private IPBinaryAddress iPBinaryAddress = null;
	private IPTextRepresentedAddress iPTextRepresentedAddress = null;
	
	public IPAddress() {
	}

	public IPAddress(byte[] code) {
		this.code = code;
	}

	public void setIPBinaryAddress(IPBinaryAddress iPBinaryAddress) {
		this.iPBinaryAddress = iPBinaryAddress;
	}

	public IPBinaryAddress getIPBinaryAddress() {
		return iPBinaryAddress;
	}

	public void setIPTextRepresentedAddress(IPTextRepresentedAddress iPTextRepresentedAddress) {
		this.iPTextRepresentedAddress = iPTextRepresentedAddress;
	}

	public IPTextRepresentedAddress getIPTextRepresentedAddress() {
		return iPTextRepresentedAddress;
	}

	@Override public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			reverseOS.write(code);
			return code.length;
		}

		int codeLength = 0;
		if (iPTextRepresentedAddress != null) {
			codeLength += iPTextRepresentedAddress.encode(reverseOS);
			return codeLength;
		}
		
		if (iPBinaryAddress != null) {
			codeLength += iPBinaryAddress.encode(reverseOS);
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	@Override public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int tlvByteCount = 0;
		boolean tagWasPassed = (berTag != null);

		if (berTag == null) {
			berTag = new BerTag();
			tlvByteCount += berTag.decode(is);
		}

		int numDecodedBytes;

		iPBinaryAddress = new IPBinaryAddress();
		numDecodedBytes = iPBinaryAddress.decode(is, berTag);
		if (numDecodedBytes != 0) {
			return tlvByteCount + numDecodedBytes;
		}
		else {
			iPBinaryAddress = null;
		}

		iPTextRepresentedAddress = new IPTextRepresentedAddress();
		numDecodedBytes = iPTextRepresentedAddress.decode(is, berTag);
		if (numDecodedBytes != 0) {
			return tlvByteCount + numDecodedBytes;
		}
		else {
			iPTextRepresentedAddress = null;
		}

		if (tagWasPassed) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	@Override public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (iPBinaryAddress != null) {
			sb.append("iPBinaryAddress: ");
			iPBinaryAddress.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (iPTextRepresentedAddress != null) {
			sb.append("iPTextRepresentedAddress: ");
			iPTextRepresentedAddress.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

