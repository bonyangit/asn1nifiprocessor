/*
 * This class file was automatically generated by ASN1bean v1.12.0 (http://www.beanit.com)
 */

package pgw;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.asn1bean.ber.*;
import com.beanit.asn1bean.ber.types.*;
import com.beanit.asn1bean.ber.types.string.*;


public class PGWRecord implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ServingNodeAddress implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		private byte[] code = null;
		private List<GSNAddress> seqOf = null;

		public ServingNodeAddress() {
			seqOf = new ArrayList<GSNAddress>();
		}

		public ServingNodeAddress(byte[] code) {
			this.code = code;
		}

		public List<GSNAddress> getGSNAddress() {
			if (seqOf == null) {
				seqOf = new ArrayList<GSNAddress>();
			}
			return seqOf;
		}

		@Override public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				reverseOS.write(code);
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		@Override public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int tlByteCount = 0;
			int vByteCount = 0;
			int numDecodedBytes;
			BerTag berTag = new BerTag();
			if (withTag) {
				tlByteCount += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			tlByteCount += length.decode(is);
			int lengthVal = length.val;

			while (vByteCount < lengthVal || lengthVal < 0) {
				vByteCount += berTag.decode(is);

				if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
					vByteCount += BerLength.readEocByte(is);
					break;
				}

				GSNAddress element = new GSNAddress();
				numDecodedBytes = element.decode(is, berTag);
				if (numDecodedBytes == 0) {
					throw new IOException("Tag did not match");
				}
				vByteCount += numDecodedBytes;
				seqOf.add(element);
			}
			if (lengthVal >= 0 && vByteCount != lengthVal) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + lengthVal + " but has " + vByteCount);

			}
			return tlByteCount + vByteCount;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<GSNAddress> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ListOfTrafficVolumes implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		private byte[] code = null;
		private List<ChangeOfCharCondition> seqOf = null;

		public ListOfTrafficVolumes() {
			seqOf = new ArrayList<ChangeOfCharCondition>();
		}

		public ListOfTrafficVolumes(byte[] code) {
			this.code = code;
		}

		public List<ChangeOfCharCondition> getChangeOfCharCondition() {
			if (seqOf == null) {
				seqOf = new ArrayList<ChangeOfCharCondition>();
			}
			return seqOf;
		}

		@Override public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				reverseOS.write(code);
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		@Override public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int tlByteCount = 0;
			int vByteCount = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				tlByteCount += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			tlByteCount += length.decode(is);
			int lengthVal = length.val;

			while (vByteCount < lengthVal || lengthVal < 0) {
				vByteCount += berTag.decode(is);

				if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
					vByteCount += BerLength.readEocByte(is);
					break;
				}

				if (!berTag.equals(ChangeOfCharCondition.tag)) {
					throw new IOException("Tag does not match mandatory sequence of/set of component.");
				}
				ChangeOfCharCondition element = new ChangeOfCharCondition();
				vByteCount += element.decode(is, false);
				seqOf.add(element);
			}
			if (lengthVal >= 0 && vByteCount != lengthVal) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + lengthVal + " but has " + vByteCount);

			}
			return tlByteCount + vByteCount;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ChangeOfCharCondition> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ListOfServiceData implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		private byte[] code = null;
		private List<ChangeOfServiceConditions> seqOf = null;

		public ListOfServiceData() {
			seqOf = new ArrayList<ChangeOfServiceConditions>();
		}

		public ListOfServiceData(byte[] code) {
			this.code = code;
		}

		public List<ChangeOfServiceConditions> getChangeOfServiceConditions() {
			if (seqOf == null) {
				seqOf = new ArrayList<ChangeOfServiceConditions>();
			}
			return seqOf;
		}

		@Override public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				reverseOS.write(code);
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		@Override public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int tlByteCount = 0;
			int vByteCount = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				tlByteCount += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			tlByteCount += length.decode(is);
			int lengthVal = length.val;

			while (vByteCount < lengthVal || lengthVal < 0) {
				vByteCount += berTag.decode(is);

				if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
					vByteCount += BerLength.readEocByte(is);
					break;
				}

				if (!berTag.equals(ChangeOfServiceConditions.tag)) {
					throw new IOException("Tag does not match mandatory sequence of/set of component.");
				}
				ChangeOfServiceConditions element = new ChangeOfServiceConditions();
				vByteCount += element.decode(is, false);
				seqOf.add(element);
			}
			if (lengthVal >= 0 && vByteCount != lengthVal) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + lengthVal + " but has " + vByteCount);

			}
			return tlByteCount + vByteCount;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ChangeOfServiceConditions> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ServingNodeType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		private byte[] code = null;
		private List<BerEnum> seqOf = null;

		public ServingNodeType() {
			seqOf = new ArrayList<BerEnum>();
		}

		public ServingNodeType(byte[] code) {
			this.code = code;
		}

		public List<BerEnum> getBerEnum() {
			if (seqOf == null) {
				seqOf = new ArrayList<BerEnum>();
			}
			return seqOf;
		}

		@Override public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				reverseOS.write(code);
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		@Override public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int tlByteCount = 0;
			int vByteCount = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				tlByteCount += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			tlByteCount += length.decode(is);
			int lengthVal = length.val;

			while (vByteCount < lengthVal || lengthVal < 0) {
				vByteCount += berTag.decode(is);

				if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
					vByteCount += BerLength.readEocByte(is);
					break;
				}

				if (!berTag.equals(BerEnum.tag)) {
					throw new IOException("Tag does not match mandatory sequence of/set of component.");
				}
				BerEnum element = new BerEnum();
				vByteCount += element.decode(is, false);
				seqOf.add(element);
			}
			if (lengthVal >= 0 && vByteCount != lengthVal) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + lengthVal + " but has " + vByteCount);

			}
			return tlByteCount + vByteCount;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BerEnum> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 79);

	private byte[] code = null;
	private BerInteger recordType = null;
	private BerOctetString servedIMSI = null;
	private GSNAddress pGWAddress = null;
	private BerInteger chargingID = null;
	private ServingNodeAddress servingNodeAddress = null;
	private BerIA5String accessPointNameNI = null;
	private BerOctetString pdpPDNType = null;
	private PDPAddress servedPDPPDNAddress = null;
	private BerBoolean dynamicAddressFlag = null;
	private ListOfTrafficVolumes listOfTrafficVolumes = null;
	private BerOctetString recordOpeningTime = null;
	private BerInteger duration = null;
	private BerInteger causeForRecClosing = null;
	private Diagnostics diagnostics = null;
	private BerInteger recordSequenceNumber = null;
	private BerIA5String nodeID = null;
	private ContentInfo recordExtensions = null;
	private BerInteger localSequenceNumber = null;
	private BerEnum apnSelectionMode = null;
	private BerOctetString servedMSISDN = null;
	private BerOctetString chargingCharacteristics = null;
	private BerEnum chChSelectionMode = null;
	private BerNull iMSsignalingContext = null;
	private BerOctetString externalChargingID = null;
	private BerOctetString servingNodePLMNIdentifier = null;
	private PSFurnishChargingInformation pSFurnishChargingInformation = null;
	private BerOctetString servedIMEISV = null;
	private BerInteger rATType = null;
	private BerOctetString mSTimeZone = null;
	private BerOctetString userLocationInformation = null;
	private BerOctetString cAMELChargingInformation = null;
	private ListOfServiceData listOfServiceData = null;
	private ServingNodeType servingNodeType = null;
	private SubscriptionID servedMNNAI = null;
	private BerOctetString pGWPLMNIdentifier = null;
	private BerOctetString startTime = null;
	private BerOctetString stopTime = null;
	private BerOctetString served3gpp2MEID = null;
	private BerInteger pDNConnectionChargingID = null;
	private BerNull iMSIunauthenticatedFlag = null;
	private UserCSGInformation userCSGInformation = null;
	private BerOctetString threeGPP2UserLocationInformation = null;
	private PDPAddress servedPDPPDNAddressExt = null;
	private BerNull lowPriorityIndicator = null;
	private BerBoolean dynamicAddressFlagExt = null;
	private GSNAddress pGWiPv6AddressUsed = null;
	private BerInteger sGiPtPTunnellingMethod = null;
	private BerBoolean uNIPDUCPOnlyFlag = null;
	private ServingPLMNRateControl servingPLMNRateControl = null;
	private APNRateControl aPNRateControl = null;
	private BerInteger pDPPDNTypeExtension = null;
	private MOExceptionDataCounter mOExceptionDataCounter = null;
	
	public PGWRecord() {
	}

	public PGWRecord(byte[] code) {
		this.code = code;
	}

	public void setRecordType(BerInteger recordType) {
		this.recordType = recordType;
	}

	public BerInteger getRecordType() {
		return recordType;
	}

	public void setServedIMSI(BerOctetString servedIMSI) {
		this.servedIMSI = servedIMSI;
	}

	public BerOctetString getServedIMSI() {
		return servedIMSI;
	}

	public void setPGWAddress(GSNAddress pGWAddress) {
		this.pGWAddress = pGWAddress;
	}

	public GSNAddress getPGWAddress() {
		return pGWAddress;
	}

	public void setChargingID(BerInteger chargingID) {
		this.chargingID = chargingID;
	}

	public BerInteger getChargingID() {
		return chargingID;
	}

	public void setServingNodeAddress(ServingNodeAddress servingNodeAddress) {
		this.servingNodeAddress = servingNodeAddress;
	}

	public ServingNodeAddress getServingNodeAddress() {
		return servingNodeAddress;
	}

	public void setAccessPointNameNI(BerIA5String accessPointNameNI) {
		this.accessPointNameNI = accessPointNameNI;
	}

	public BerIA5String getAccessPointNameNI() {
		return accessPointNameNI;
	}

	public void setPdpPDNType(BerOctetString pdpPDNType) {
		this.pdpPDNType = pdpPDNType;
	}

	public BerOctetString getPdpPDNType() {
		return pdpPDNType;
	}

	public void setServedPDPPDNAddress(PDPAddress servedPDPPDNAddress) {
		this.servedPDPPDNAddress = servedPDPPDNAddress;
	}

	public PDPAddress getServedPDPPDNAddress() {
		return servedPDPPDNAddress;
	}

	public void setDynamicAddressFlag(BerBoolean dynamicAddressFlag) {
		this.dynamicAddressFlag = dynamicAddressFlag;
	}

	public BerBoolean getDynamicAddressFlag() {
		return dynamicAddressFlag;
	}

	public void setListOfTrafficVolumes(ListOfTrafficVolumes listOfTrafficVolumes) {
		this.listOfTrafficVolumes = listOfTrafficVolumes;
	}

	public ListOfTrafficVolumes getListOfTrafficVolumes() {
		return listOfTrafficVolumes;
	}

	public void setRecordOpeningTime(BerOctetString recordOpeningTime) {
		this.recordOpeningTime = recordOpeningTime;
	}

	public BerOctetString getRecordOpeningTime() {
		return recordOpeningTime;
	}

	public void setDuration(BerInteger duration) {
		this.duration = duration;
	}

	public BerInteger getDuration() {
		return duration;
	}

	public void setCauseForRecClosing(BerInteger causeForRecClosing) {
		this.causeForRecClosing = causeForRecClosing;
	}

	public BerInteger getCauseForRecClosing() {
		return causeForRecClosing;
	}

	public void setDiagnostics(Diagnostics diagnostics) {
		this.diagnostics = diagnostics;
	}

	public Diagnostics getDiagnostics() {
		return diagnostics;
	}

	public void setRecordSequenceNumber(BerInteger recordSequenceNumber) {
		this.recordSequenceNumber = recordSequenceNumber;
	}

	public BerInteger getRecordSequenceNumber() {
		return recordSequenceNumber;
	}

	public void setNodeID(BerIA5String nodeID) {
		this.nodeID = nodeID;
	}

	public BerIA5String getNodeID() {
		return nodeID;
	}

	public void setRecordExtensions(ContentInfo recordExtensions) {
		this.recordExtensions = recordExtensions;
	}

	public ContentInfo getRecordExtensions() {
		return recordExtensions;
	}

	public void setLocalSequenceNumber(BerInteger localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public BerInteger getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setApnSelectionMode(BerEnum apnSelectionMode) {
		this.apnSelectionMode = apnSelectionMode;
	}

	public BerEnum getApnSelectionMode() {
		return apnSelectionMode;
	}

	public void setServedMSISDN(BerOctetString servedMSISDN) {
		this.servedMSISDN = servedMSISDN;
	}

	public BerOctetString getServedMSISDN() {
		return servedMSISDN;
	}

	public void setChargingCharacteristics(BerOctetString chargingCharacteristics) {
		this.chargingCharacteristics = chargingCharacteristics;
	}

	public BerOctetString getChargingCharacteristics() {
		return chargingCharacteristics;
	}

	public void setChChSelectionMode(BerEnum chChSelectionMode) {
		this.chChSelectionMode = chChSelectionMode;
	}

	public BerEnum getChChSelectionMode() {
		return chChSelectionMode;
	}

	public void setIMSsignalingContext(BerNull iMSsignalingContext) {
		this.iMSsignalingContext = iMSsignalingContext;
	}

	public BerNull getIMSsignalingContext() {
		return iMSsignalingContext;
	}

	public void setExternalChargingID(BerOctetString externalChargingID) {
		this.externalChargingID = externalChargingID;
	}

	public BerOctetString getExternalChargingID() {
		return externalChargingID;
	}

	public void setServingNodePLMNIdentifier(BerOctetString servingNodePLMNIdentifier) {
		this.servingNodePLMNIdentifier = servingNodePLMNIdentifier;
	}

	public BerOctetString getServingNodePLMNIdentifier() {
		return servingNodePLMNIdentifier;
	}

	public void setPSFurnishChargingInformation(PSFurnishChargingInformation pSFurnishChargingInformation) {
		this.pSFurnishChargingInformation = pSFurnishChargingInformation;
	}

	public PSFurnishChargingInformation getPSFurnishChargingInformation() {
		return pSFurnishChargingInformation;
	}

	public void setServedIMEISV(BerOctetString servedIMEISV) {
		this.servedIMEISV = servedIMEISV;
	}

	public BerOctetString getServedIMEISV() {
		return servedIMEISV;
	}

	public void setRATType(BerInteger rATType) {
		this.rATType = rATType;
	}

	public BerInteger getRATType() {
		return rATType;
	}

	public void setMSTimeZone(BerOctetString mSTimeZone) {
		this.mSTimeZone = mSTimeZone;
	}

	public BerOctetString getMSTimeZone() {
		return mSTimeZone;
	}

	public void setUserLocationInformation(BerOctetString userLocationInformation) {
		this.userLocationInformation = userLocationInformation;
	}

	public BerOctetString getUserLocationInformation() {
		return userLocationInformation;
	}

	public void setCAMELChargingInformation(BerOctetString cAMELChargingInformation) {
		this.cAMELChargingInformation = cAMELChargingInformation;
	}

	public BerOctetString getCAMELChargingInformation() {
		return cAMELChargingInformation;
	}

	public void setListOfServiceData(ListOfServiceData listOfServiceData) {
		this.listOfServiceData = listOfServiceData;
	}

	public ListOfServiceData getListOfServiceData() {
		return listOfServiceData;
	}

	public void setServingNodeType(ServingNodeType servingNodeType) {
		this.servingNodeType = servingNodeType;
	}

	public ServingNodeType getServingNodeType() {
		return servingNodeType;
	}

	public void setServedMNNAI(SubscriptionID servedMNNAI) {
		this.servedMNNAI = servedMNNAI;
	}

	public SubscriptionID getServedMNNAI() {
		return servedMNNAI;
	}

	public void setPGWPLMNIdentifier(BerOctetString pGWPLMNIdentifier) {
		this.pGWPLMNIdentifier = pGWPLMNIdentifier;
	}

	public BerOctetString getPGWPLMNIdentifier() {
		return pGWPLMNIdentifier;
	}

	public void setStartTime(BerOctetString startTime) {
		this.startTime = startTime;
	}

	public BerOctetString getStartTime() {
		return startTime;
	}

	public void setStopTime(BerOctetString stopTime) {
		this.stopTime = stopTime;
	}

	public BerOctetString getStopTime() {
		return stopTime;
	}

	public void setServed3gpp2MEID(BerOctetString served3gpp2MEID) {
		this.served3gpp2MEID = served3gpp2MEID;
	}

	public BerOctetString getServed3gpp2MEID() {
		return served3gpp2MEID;
	}

	public void setPDNConnectionChargingID(BerInteger pDNConnectionChargingID) {
		this.pDNConnectionChargingID = pDNConnectionChargingID;
	}

	public BerInteger getPDNConnectionChargingID() {
		return pDNConnectionChargingID;
	}

	public void setIMSIunauthenticatedFlag(BerNull iMSIunauthenticatedFlag) {
		this.iMSIunauthenticatedFlag = iMSIunauthenticatedFlag;
	}

	public BerNull getIMSIunauthenticatedFlag() {
		return iMSIunauthenticatedFlag;
	}

	public void setUserCSGInformation(UserCSGInformation userCSGInformation) {
		this.userCSGInformation = userCSGInformation;
	}

	public UserCSGInformation getUserCSGInformation() {
		return userCSGInformation;
	}

	public void setThreeGPP2UserLocationInformation(BerOctetString threeGPP2UserLocationInformation) {
		this.threeGPP2UserLocationInformation = threeGPP2UserLocationInformation;
	}

	public BerOctetString getThreeGPP2UserLocationInformation() {
		return threeGPP2UserLocationInformation;
	}

	public void setServedPDPPDNAddressExt(PDPAddress servedPDPPDNAddressExt) {
		this.servedPDPPDNAddressExt = servedPDPPDNAddressExt;
	}

	public PDPAddress getServedPDPPDNAddressExt() {
		return servedPDPPDNAddressExt;
	}

	public void setLowPriorityIndicator(BerNull lowPriorityIndicator) {
		this.lowPriorityIndicator = lowPriorityIndicator;
	}

	public BerNull getLowPriorityIndicator() {
		return lowPriorityIndicator;
	}

	public void setDynamicAddressFlagExt(BerBoolean dynamicAddressFlagExt) {
		this.dynamicAddressFlagExt = dynamicAddressFlagExt;
	}

	public BerBoolean getDynamicAddressFlagExt() {
		return dynamicAddressFlagExt;
	}

	public void setPGWiPv6AddressUsed(GSNAddress pGWiPv6AddressUsed) {
		this.pGWiPv6AddressUsed = pGWiPv6AddressUsed;
	}

	public GSNAddress getPGWiPv6AddressUsed() {
		return pGWiPv6AddressUsed;
	}

	public void setSGiPtPTunnellingMethod(BerInteger sGiPtPTunnellingMethod) {
		this.sGiPtPTunnellingMethod = sGiPtPTunnellingMethod;
	}

	public BerInteger getSGiPtPTunnellingMethod() {
		return sGiPtPTunnellingMethod;
	}

	public void setUNIPDUCPOnlyFlag(BerBoolean uNIPDUCPOnlyFlag) {
		this.uNIPDUCPOnlyFlag = uNIPDUCPOnlyFlag;
	}

	public BerBoolean getUNIPDUCPOnlyFlag() {
		return uNIPDUCPOnlyFlag;
	}

	public void setServingPLMNRateControl(ServingPLMNRateControl servingPLMNRateControl) {
		this.servingPLMNRateControl = servingPLMNRateControl;
	}

	public ServingPLMNRateControl getServingPLMNRateControl() {
		return servingPLMNRateControl;
	}

	public void setAPNRateControl(APNRateControl aPNRateControl) {
		this.aPNRateControl = aPNRateControl;
	}

	public APNRateControl getAPNRateControl() {
		return aPNRateControl;
	}

	public void setPDPPDNTypeExtension(BerInteger pDPPDNTypeExtension) {
		this.pDPPDNTypeExtension = pDPPDNTypeExtension;
	}

	public BerInteger getPDPPDNTypeExtension() {
		return pDPPDNTypeExtension;
	}

	public void setMOExceptionDataCounter(MOExceptionDataCounter mOExceptionDataCounter) {
		this.mOExceptionDataCounter = mOExceptionDataCounter;
	}

	public MOExceptionDataCounter getMOExceptionDataCounter() {
		return mOExceptionDataCounter;
	}

	@Override public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			reverseOS.write(code);
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (mOExceptionDataCounter != null) {
			codeLength += mOExceptionDataCounter.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 69
			reverseOS.write(0x45);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (pDPPDNTypeExtension != null) {
			codeLength += pDPPDNTypeExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 68
			reverseOS.write(0x44);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (aPNRateControl != null) {
			codeLength += aPNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 67
			reverseOS.write(0x43);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (servingPLMNRateControl != null) {
			codeLength += servingPLMNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 66
			reverseOS.write(0x42);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (uNIPDUCPOnlyFlag != null) {
			codeLength += uNIPDUCPOnlyFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 65
			reverseOS.write(0x41);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (sGiPtPTunnellingMethod != null) {
			codeLength += sGiPtPTunnellingMethod.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 64
			reverseOS.write(0x40);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (pGWiPv6AddressUsed != null) {
			sublength = pGWiPv6AddressUsed.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 50
			reverseOS.write(0x32);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (dynamicAddressFlagExt != null) {
			codeLength += dynamicAddressFlagExt.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 47
			reverseOS.write(0x2F);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (lowPriorityIndicator != null) {
			codeLength += lowPriorityIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 46
			reverseOS.write(0x2E);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (servedPDPPDNAddressExt != null) {
			sublength = servedPDPPDNAddressExt.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
			reverseOS.write(0x2D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (threeGPP2UserLocationInformation != null) {
			codeLength += threeGPP2UserLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 44
			reverseOS.write(0x2C);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (userCSGInformation != null) {
			codeLength += userCSGInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 43
			reverseOS.write(0x2B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (iMSIunauthenticatedFlag != null) {
			codeLength += iMSIunauthenticatedFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 42
			reverseOS.write(0x2A);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (pDNConnectionChargingID != null) {
			codeLength += pDNConnectionChargingID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 41
			reverseOS.write(0x29);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (served3gpp2MEID != null) {
			codeLength += served3gpp2MEID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 40
			reverseOS.write(0x28);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (stopTime != null) {
			codeLength += stopTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 39
			reverseOS.write(0x27);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (startTime != null) {
			codeLength += startTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 38
			reverseOS.write(0x26);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (pGWPLMNIdentifier != null) {
			codeLength += pGWPLMNIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 37
			reverseOS.write(0x25);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (servedMNNAI != null) {
			codeLength += servedMNNAI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (servingNodeType != null) {
			codeLength += servingNodeType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (listOfServiceData != null) {
			codeLength += listOfServiceData.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
			reverseOS.write(0x22);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (cAMELChargingInformation != null) {
			codeLength += cAMELChargingInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 33
			reverseOS.write(0x21);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (userLocationInformation != null) {
			codeLength += userLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 32
			reverseOS.write(0x20);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (mSTimeZone != null) {
			codeLength += mSTimeZone.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			reverseOS.write(0x1F);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (rATType != null) {
			codeLength += rATType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 30
			reverseOS.write(0x9E);
			codeLength += 1;
		}
		
		if (servedIMEISV != null) {
			codeLength += servedIMEISV.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			reverseOS.write(0x9D);
			codeLength += 1;
		}
		
		if (pSFurnishChargingInformation != null) {
			codeLength += pSFurnishChargingInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
			reverseOS.write(0xBC);
			codeLength += 1;
		}
		
		if (servingNodePLMNIdentifier != null) {
			codeLength += servingNodePLMNIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 27
			reverseOS.write(0x9B);
			codeLength += 1;
		}
		
		if (externalChargingID != null) {
			codeLength += externalChargingID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 26
			reverseOS.write(0x9A);
			codeLength += 1;
		}
		
		if (iMSsignalingContext != null) {
			codeLength += iMSsignalingContext.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			reverseOS.write(0x99);
			codeLength += 1;
		}
		
		if (chChSelectionMode != null) {
			codeLength += chChSelectionMode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			reverseOS.write(0x98);
			codeLength += 1;
		}
		
		codeLength += chargingCharacteristics.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 23
		reverseOS.write(0x97);
		codeLength += 1;
		
		if (servedMSISDN != null) {
			codeLength += servedMSISDN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			reverseOS.write(0x96);
			codeLength += 1;
		}
		
		if (apnSelectionMode != null) {
			codeLength += apnSelectionMode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			reverseOS.write(0x95);
			codeLength += 1;
		}
		
		if (localSequenceNumber != null) {
			codeLength += localSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			reverseOS.write(0x94);
			codeLength += 1;
		}
		
		if (recordExtensions != null) {
			codeLength += recordExtensions.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (nodeID != null) {
			codeLength += nodeID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			reverseOS.write(0x92);
			codeLength += 1;
		}
		
		if (recordSequenceNumber != null) {
			codeLength += recordSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (diagnostics != null) {
			sublength = diagnostics.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		codeLength += causeForRecClosing.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 15
		reverseOS.write(0x8F);
		codeLength += 1;
		
		codeLength += duration.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 14
		reverseOS.write(0x8E);
		codeLength += 1;
		
		codeLength += recordOpeningTime.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 13
		reverseOS.write(0x8D);
		codeLength += 1;
		
		if (listOfTrafficVolumes != null) {
			codeLength += listOfTrafficVolumes.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (dynamicAddressFlag != null) {
			codeLength += dynamicAddressFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (servedPDPPDNAddress != null) {
			sublength = servedPDPPDNAddress.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (pdpPDNType != null) {
			codeLength += pdpPDNType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (accessPointNameNI != null) {
			codeLength += accessPointNameNI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		codeLength += servingNodeAddress.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
		reverseOS.write(0xA6);
		codeLength += 1;
		
		codeLength += chargingID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		sublength = pGWAddress.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		if (servedIMSI != null) {
			codeLength += servedIMSI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		codeLength += recordType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	@Override public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int tlByteCount = 0;
		int vByteCount = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			tlByteCount += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		tlByteCount += length.decode(is);
		int lengthVal = length.val;

		while (vByteCount < lengthVal || lengthVal < 0) {
			vByteCount += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				recordType = new BerInteger();
				vByteCount += recordType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				servedIMSI = new BerOctetString();
				vByteCount += servedIMSI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				vByteCount += length.decode(is);
				pGWAddress = new GSNAddress();
				vByteCount += pGWAddress.decode(is, null);
				vByteCount += length.readEocIfIndefinite(is);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				chargingID = new BerInteger();
				vByteCount += chargingID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
				servingNodeAddress = new ServingNodeAddress();
				vByteCount += servingNodeAddress.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				accessPointNameNI = new BerIA5String();
				vByteCount += accessPointNameNI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				pdpPDNType = new BerOctetString();
				vByteCount += pdpPDNType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				vByteCount += length.decode(is);
				servedPDPPDNAddress = new PDPAddress();
				vByteCount += servedPDPPDNAddress.decode(is, null);
				vByteCount += length.readEocIfIndefinite(is);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				dynamicAddressFlag = new BerBoolean();
				vByteCount += dynamicAddressFlag.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
				listOfTrafficVolumes = new ListOfTrafficVolumes();
				vByteCount += listOfTrafficVolumes.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				recordOpeningTime = new BerOctetString();
				vByteCount += recordOpeningTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				duration = new BerInteger();
				vByteCount += duration.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
				causeForRecClosing = new BerInteger();
				vByteCount += causeForRecClosing.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
				vByteCount += length.decode(is);
				diagnostics = new Diagnostics();
				vByteCount += diagnostics.decode(is, null);
				vByteCount += length.readEocIfIndefinite(is);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
				recordSequenceNumber = new BerInteger();
				vByteCount += recordSequenceNumber.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
				nodeID = new BerIA5String();
				vByteCount += nodeID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
				recordExtensions = new ContentInfo();
				vByteCount += recordExtensions.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
				localSequenceNumber = new BerInteger();
				vByteCount += localSequenceNumber.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
				apnSelectionMode = new BerEnum();
				vByteCount += apnSelectionMode.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
				servedMSISDN = new BerOctetString();
				vByteCount += servedMSISDN.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
				chargingCharacteristics = new BerOctetString();
				vByteCount += chargingCharacteristics.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
				chChSelectionMode = new BerEnum();
				vByteCount += chChSelectionMode.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
				iMSsignalingContext = new BerNull();
				vByteCount += iMSsignalingContext.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
				externalChargingID = new BerOctetString();
				vByteCount += externalChargingID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
				servingNodePLMNIdentifier = new BerOctetString();
				vByteCount += servingNodePLMNIdentifier.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
				pSFurnishChargingInformation = new PSFurnishChargingInformation();
				vByteCount += pSFurnishChargingInformation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
				servedIMEISV = new BerOctetString();
				vByteCount += servedIMEISV.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
				rATType = new BerInteger();
				vByteCount += rATType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
				mSTimeZone = new BerOctetString();
				vByteCount += mSTimeZone.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 32)) {
				userLocationInformation = new BerOctetString();
				vByteCount += userLocationInformation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 33)) {
				cAMELChargingInformation = new BerOctetString();
				vByteCount += cAMELChargingInformation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
				listOfServiceData = new ListOfServiceData();
				vByteCount += listOfServiceData.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
				servingNodeType = new ServingNodeType();
				vByteCount += servingNodeType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
				servedMNNAI = new SubscriptionID();
				vByteCount += servedMNNAI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 37)) {
				pGWPLMNIdentifier = new BerOctetString();
				vByteCount += pGWPLMNIdentifier.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 38)) {
				startTime = new BerOctetString();
				vByteCount += startTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 39)) {
				stopTime = new BerOctetString();
				vByteCount += stopTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 40)) {
				served3gpp2MEID = new BerOctetString();
				vByteCount += served3gpp2MEID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 41)) {
				pDNConnectionChargingID = new BerInteger();
				vByteCount += pDNConnectionChargingID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 42)) {
				iMSIunauthenticatedFlag = new BerNull();
				vByteCount += iMSIunauthenticatedFlag.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
				userCSGInformation = new UserCSGInformation();
				vByteCount += userCSGInformation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 44)) {
				threeGPP2UserLocationInformation = new BerOctetString();
				vByteCount += threeGPP2UserLocationInformation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
				vByteCount += length.decode(is);
				servedPDPPDNAddressExt = new PDPAddress();
				vByteCount += servedPDPPDNAddressExt.decode(is, null);
				vByteCount += length.readEocIfIndefinite(is);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 46)) {
				lowPriorityIndicator = new BerNull();
				vByteCount += lowPriorityIndicator.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 47)) {
				dynamicAddressFlagExt = new BerBoolean();
				vByteCount += dynamicAddressFlagExt.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
				vByteCount += length.decode(is);
				pGWiPv6AddressUsed = new GSNAddress();
				vByteCount += pGWiPv6AddressUsed.decode(is, null);
				vByteCount += length.readEocIfIndefinite(is);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 64)) {
				sGiPtPTunnellingMethod = new BerInteger();
				vByteCount += sGiPtPTunnellingMethod.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 65)) {
				uNIPDUCPOnlyFlag = new BerBoolean();
				vByteCount += uNIPDUCPOnlyFlag.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 66)) {
				servingPLMNRateControl = new ServingPLMNRateControl();
				vByteCount += servingPLMNRateControl.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 67)) {
				aPNRateControl = new APNRateControl();
				vByteCount += aPNRateControl.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 68)) {
				pDPPDNTypeExtension = new BerInteger();
				vByteCount += pDPPDNTypeExtension.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 69)) {
				mOExceptionDataCounter = new MOExceptionDataCounter();
				vByteCount += mOExceptionDataCounter.decode(is, false);
			}
			else if (lengthVal < 0 && berTag.equals(0, 0, 0)) {
				vByteCount += BerLength.readEocByte(is);
				return tlByteCount + vByteCount;
			}
			else {
				throw new IOException("Tag does not match any set component: " + berTag);
			}
		}
		if (vByteCount != lengthVal) {
			throw new IOException("Length of set does not match length tag, length tag: " + lengthVal + ", actual set length: " + vByteCount);
		}
		return tlByteCount + vByteCount;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	@Override public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordType != null) {
			sb.append("recordType: ").append(recordType);
		}
		else {
			sb.append("recordType: <empty-required-field>");
		}
		
		if (servedIMSI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedIMSI: ").append(servedIMSI);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (pGWAddress != null) {
			sb.append("pGWAddress: ");
			pGWAddress.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("pGWAddress: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (chargingID != null) {
			sb.append("chargingID: ").append(chargingID);
		}
		else {
			sb.append("chargingID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (servingNodeAddress != null) {
			sb.append("servingNodeAddress: ");
			servingNodeAddress.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("servingNodeAddress: <empty-required-field>");
		}
		
		if (accessPointNameNI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accessPointNameNI: ").append(accessPointNameNI);
		}
		
		if (pdpPDNType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdpPDNType: ").append(pdpPDNType);
		}
		
		if (servedPDPPDNAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedPDPPDNAddress: ");
			servedPDPPDNAddress.appendAsString(sb, indentLevel + 1);
		}
		
		if (dynamicAddressFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dynamicAddressFlag: ").append(dynamicAddressFlag);
		}
		
		if (listOfTrafficVolumes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("listOfTrafficVolumes: ");
			listOfTrafficVolumes.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordOpeningTime != null) {
			sb.append("recordOpeningTime: ").append(recordOpeningTime);
		}
		else {
			sb.append("recordOpeningTime: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (duration != null) {
			sb.append("duration: ").append(duration);
		}
		else {
			sb.append("duration: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (causeForRecClosing != null) {
			sb.append("causeForRecClosing: ").append(causeForRecClosing);
		}
		else {
			sb.append("causeForRecClosing: <empty-required-field>");
		}
		
		if (diagnostics != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("diagnostics: ");
			diagnostics.appendAsString(sb, indentLevel + 1);
		}
		
		if (recordSequenceNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordSequenceNumber: ").append(recordSequenceNumber);
		}
		
		if (nodeID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nodeID: ").append(nodeID);
		}
		
		if (recordExtensions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordExtensions: ");
			recordExtensions.appendAsString(sb, indentLevel + 1);
		}
		
		if (localSequenceNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
		}
		
		if (apnSelectionMode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("apnSelectionMode: ").append(apnSelectionMode);
		}
		
		if (servedMSISDN != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedMSISDN: ").append(servedMSISDN);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (chargingCharacteristics != null) {
			sb.append("chargingCharacteristics: ").append(chargingCharacteristics);
		}
		else {
			sb.append("chargingCharacteristics: <empty-required-field>");
		}
		
		if (chChSelectionMode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chChSelectionMode: ").append(chChSelectionMode);
		}
		
		if (iMSsignalingContext != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("iMSsignalingContext: ").append(iMSsignalingContext);
		}
		
		if (externalChargingID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalChargingID: ").append(externalChargingID);
		}
		
		if (servingNodePLMNIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNodePLMNIdentifier: ").append(servingNodePLMNIdentifier);
		}
		
		if (pSFurnishChargingInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pSFurnishChargingInformation: ");
			pSFurnishChargingInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (servedIMEISV != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedIMEISV: ").append(servedIMEISV);
		}
		
		if (rATType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rATType: ").append(rATType);
		}
		
		if (mSTimeZone != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mSTimeZone: ").append(mSTimeZone);
		}
		
		if (userLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userLocationInformation: ").append(userLocationInformation);
		}
		
		if (cAMELChargingInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cAMELChargingInformation: ").append(cAMELChargingInformation);
		}
		
		if (listOfServiceData != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("listOfServiceData: ");
			listOfServiceData.appendAsString(sb, indentLevel + 1);
		}
		
		if (servingNodeType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNodeType: ");
			servingNodeType.appendAsString(sb, indentLevel + 1);
		}
		
		if (servedMNNAI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedMNNAI: ");
			servedMNNAI.appendAsString(sb, indentLevel + 1);
		}
		
		if (pGWPLMNIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pGWPLMNIdentifier: ").append(pGWPLMNIdentifier);
		}
		
		if (startTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("startTime: ").append(startTime);
		}
		
		if (stopTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("stopTime: ").append(stopTime);
		}
		
		if (served3gpp2MEID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("served3gpp2MEID: ").append(served3gpp2MEID);
		}
		
		if (pDNConnectionChargingID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pDNConnectionChargingID: ").append(pDNConnectionChargingID);
		}
		
		if (iMSIunauthenticatedFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("iMSIunauthenticatedFlag: ").append(iMSIunauthenticatedFlag);
		}
		
		if (userCSGInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userCSGInformation: ");
			userCSGInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (threeGPP2UserLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("threeGPP2UserLocationInformation: ").append(threeGPP2UserLocationInformation);
		}
		
		if (servedPDPPDNAddressExt != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedPDPPDNAddressExt: ");
			servedPDPPDNAddressExt.appendAsString(sb, indentLevel + 1);
		}
		
		if (lowPriorityIndicator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lowPriorityIndicator: ").append(lowPriorityIndicator);
		}
		
		if (dynamicAddressFlagExt != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dynamicAddressFlagExt: ").append(dynamicAddressFlagExt);
		}
		
		if (pGWiPv6AddressUsed != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pGWiPv6AddressUsed: ");
			pGWiPv6AddressUsed.appendAsString(sb, indentLevel + 1);
		}
		
		if (sGiPtPTunnellingMethod != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sGiPtPTunnellingMethod: ").append(sGiPtPTunnellingMethod);
		}
		
		if (uNIPDUCPOnlyFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uNIPDUCPOnlyFlag: ").append(uNIPDUCPOnlyFlag);
		}
		
		if (servingPLMNRateControl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingPLMNRateControl: ");
			servingPLMNRateControl.appendAsString(sb, indentLevel + 1);
		}
		
		if (aPNRateControl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aPNRateControl: ");
			aPNRateControl.appendAsString(sb, indentLevel + 1);
		}
		
		if (pDPPDNTypeExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pDPPDNTypeExtension: ").append(pDPPDNTypeExtension);
		}
		
		if (mOExceptionDataCounter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mOExceptionDataCounter: ");
			mOExceptionDataCounter.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

